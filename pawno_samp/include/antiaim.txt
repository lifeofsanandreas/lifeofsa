/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//BUST AIM
//
//Detects players who are using aimbot
//Can detect proaim ~100%
//Thoroughly tested
//
//License:Public Domain
//
//Credits:
//Yashas
//RedShirt & niCe for vector functions
//ipsLeon & Kyance for their aimbot detectors
//Pottus for constructive criticism 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Callbacks:
//	OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,type)
//
//Stocks:
//	native BustAim::GetPlayerProfile(playerid,&allshots,&hitshots,&cont_shots,&missing_aim_count,&proaim_count,&backward_shots);
//	native BustAim::ResetPlayerProfile(playerid);
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if defined _INCLUDE_BUSTAIM_
	#endinput
#endif
#define _INCLUDE_BUSTAIM_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define BustAim:: BustAim_

#if !defined BUSTAIM_ALLOWABLE_DIST
     #define BUSTAIM_ALLOWABLE_DIST 5
#endif
#if !defined BUSTAIM_TRIGGER_NO_MISS
    #define BUSTAIM_TRIGGER_NO_MISS 8
#endif
#if !defined BUSTAIM_TRIGGER_RANDOM_AIM
    #define BUSTAIM_TRIGGER_RANDOM_AIM 6
#endif
#if !defined BUSTAIM_TRIGGER_BACKWARD_SHOT 3
    #define BUSTAIM_TRIGGER_BACKWARD_SHOT 3
#endif
#if !defined BUSTAIM_TRIGGER_TELEPORT
    #define BUSTAIM_TRIGGER_TELEPORT 3
#endif
#if !defined BUSTAIM_SKIP_WEAPON_IDS
    #define BUSTAIM_SKIP_WEAPON_IDS 38
#endif
#if !defined BUSTAIM_MAX_P2B_VARIANCE
    #define BUSTAIM_MAX_P2B_VARIANCE 25
#endif
#if !defined BUSTAIM_MAX_PL_PERCENT_ALLOWED
    #define BUSTAIM_MAX_PL_PERCENT_ALLOWED 1
#endif
#if !defined BUSTAIM_MAX_PLAYER_SPHERE
    #define BUSTAIM_MAX_PLAYER_SPHERE 2.0
#endif

#define BUSTAIM_PROAIM_TELEPORT 1
#define BUSTAIM_BACKWARD_SHOT 2
#define BUSTAIM_RANDOM_AIM 3
#define BUSTAIM_NO_MISS 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
forward OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,type);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static BustAim_g_ContinousShotCount[MAX_PLAYERS];
static BustAim_g_MissingAimCount[MAX_PLAYERS];
static BustAim_g_ProaimTeleCount[MAX_PLAYERS];
static BustAim_g_ShotsFired[MAX_PLAYERS];
static BustAim_g_ShotsHit[MAX_PLAYERS];
static BustAim_g_BackwardShot[MAX_PLAYERS];

static BustAim_g_OPWS_pointer = -1;
static BustAim_g_OPSFA_pointer = -1;
static BustAim_g_OPC_pointer = -1;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static InitFunctionPointers()
{
    new tmp = funcidx("BustAim_OnPlayerWeaponShot");
	if(tmp != -1)
	{
	   	#emit LCTRL       1
		#emit NEG
		#emit ADD.C       32
		#emit STOR.pri  BustAim_g_OPWS_pointer
		#emit LREF.alt  BustAim_g_OPWS_pointer
		#emit LCTRL 1
		#emit NEG
		#emit ADD
		#emit LOAD.S.alt  tmp
		#emit SHL.C.alt   3
		#emit ADD
		#emit STOR.pri  BustAim_g_OPWS_pointer
		#emit LREF.pri  BustAim_g_OPWS_pointer
		#emit STOR.pri  BustAim_g_OPWS_pointer
	}
	if((tmp = funcidx("BustAim_OnPlayerConnect")) != -1)
	{
	    #emit LCTRL       1
		#emit NEG
		#emit ADD.C       32
		#emit STOR.pri  BustAim_g_OPC_pointer
		#emit LREF.alt  BustAim_g_OPC_pointer
		#emit LCTRL 1
		#emit NEG
		#emit ADD
		#emit LOAD.S.alt  tmp
		#emit SHL.C.alt   3
		#emit ADD
		#emit STOR.pri  BustAim_g_OPC_pointer
		#emit LREF.pri  BustAim_g_OPC_pointer
		#emit STOR.pri  BustAim_g_OPC_pointer
	}
	if((tmp = funcidx("OnPlayerSuspectedForAimbot")) != -1)
	{
	    #emit LCTRL       1
		#emit NEG
		#emit ADD.C       32
		#emit STOR.pri  BustAim_g_OPSFA_pointer
		#emit LREF.alt  BustAim_g_OPSFA_pointer
		#emit LCTRL 1
		#emit NEG
		#emit ADD
		#emit LOAD.S.alt  tmp
		#emit SHL.C.alt   3
		#emit ADD
		#emit STOR.pri  BustAim_g_OPSFA_pointer
		#emit LREF.pri  BustAim_g_OPSFA_pointer
		#emit STOR.pri  BustAim_g_OPSFA_pointer
	}
}
static _CALL_OPWS(playerid,weaponid,hittype,hitid,Float:fX,Float:fY,Float:fZ)
{
    #emit LOAD.S.pri    fZ
	#emit PUSH.pri
	#emit LOAD.S.pri    fY
	#emit PUSH.pri
	#emit LOAD.S.pri    fX
	#emit PUSH.pri
	#emit LOAD.S.pri    hitid
	#emit PUSH.pri
	#emit LOAD.S.pri    hittype
	#emit PUSH.pri
	#emit LOAD.S.pri    weaponid
	#emit PUSH.pri
	#emit LOAD.S.pri    playerid
	#emit PUSH.pri

	#emit PUSH.C      28

	#emit LCTRL		  6
	#emit ADD.C		  28
	#emit PUSH.pri
	#emit LOAD.pri  BustAim_g_OPWS_pointer
	#emit SCTRL		  6

	#emit RETN

	//will never reach here
	return 0;
}
static _CALL_OPSFA(playerid,hitid,weaponid,type)
{
	#emit LOAD.S.pri    type
	#emit PUSH.pri
	#emit LOAD.S.pri    weaponid
	#emit PUSH.pri
	#emit LOAD.S.pri    hitid
	#emit PUSH.pri
	#emit LOAD.S.pri    playerid
	#emit PUSH.pri

	#emit PUSH.C      16

	#emit LCTRL		  6
	#emit ADD.C		  28
	#emit PUSH.pri
	#emit LOAD.pri  BustAim_g_OPSFA_pointer
	#emit SCTRL		  6

	#emit RETN

	//will never reach here
	return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if defined FILTERSCRIPT
	public OnFilterScriptInit()
	{
		InitFunctionPointers();
	    return CallLocalFunction("BustAim_OnFilterScriptInit", "");
	}
	#if defined _ALS_OnFilterScriptInit
	    #undef OnFilterScriptInit
	#else
	    #define _ALS_OnFilterScriptInit
	#endif
	#define OnFilterScriptInit BustAim_OnFilterScriptInit
	forward BustAim_OnFilterScriptInit();
#else
	public OnGameModeInit()
	{
		InitFunctionPointers();
		return CallLocalFunction("BustAim_OnGameModeInit","");
	}
	#if defined _ALS_OnGameModeInit
	    #undef OnGameModeInit
	#else
	    #define _ALS_OnGameModeInit
	#endif
	#define OnGameModeInit BustAim_OnGameModeInit
	forward BustAim_OnGameModeInit();
#endif
public OnPlayerConnect(playerid)
{
    BustAim_g_BackwardShot[playerid] = BustAim_g_ShotsHit[playerid] = BustAim_g_ShotsFired[playerid] = BustAim_g_ContinousShotCount[playerid] = BustAim_g_MissingAimCount[playerid] = BustAim_g_ProaimTeleCount[playerid] = 0;
	if(BustAim_g_OPC_pointer != -1)
	{
		#emit LOAD.S.pri    playerid
		#emit PUSH.pri

		#emit PUSH.C      4

		#emit LCTRL		  6
		#emit ADD.C		  28
		#emit PUSH.pri
		#emit LOAD.pri  BustAim_g_OPC_pointer
		#emit SCTRL		  6
		#emit RETN
	}
	return 1;
}
#if defined _ALS_OnPlayerConnect
#undef OnPlayerConnect
#else
#define _ALS_OnPlayerConnect
#endif

#define OnPlayerConnect BustAim_OnPlayerConnect
forward BustAim_OnPlayerConnect(playerid);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
        new Float:TGTDistance;

        TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

        new Float:tmpX, Float:tmpY, Float:tmpZ;

        tmpX = FrX * TGTDistance + CamX;
        tmpY = FrY * TGTDistance + CamY;
        tmpZ = FrZ * TGTDistance + CamZ;

        return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
static Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{
  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}
static GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
        x += (distance * floatsin(-angle, degrees));
        y += (distance * floatcos(-angle, degrees));
}
static IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z,Float:vector_x,Float:vector_y,Float:vector_z,Float:radius)
{
        new Float:camera_x,Float:camera_y,Float:camera_z;
        GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);

        new Float:vertical, Float:horizontal;

        switch (GetPlayerWeapon(playerid))
        {
                  case 34,35,36: {
                  if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
                  return false;
                  }
                  case 30,31: {vertical = 4.0; horizontal = -1.6;}
                  case 33: {vertical = 2.7; horizontal = -1.0;}
                  default: {vertical = 6.0; horizontal = -2.2;}
        }

        new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
        new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
        GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));
        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
        return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	BustAim_g_ShotsFired[playerid]++;
    if(hittype == BULLET_HIT_TYPE_PLAYER && weaponid !=25 && weaponid !=26 && weaponid !=27)
    {
        BustAim_g_ShotsHit[playerid]++;
        if(IsPlayerNPC(playerid) || IsPlayerNPC(hitid))
	    if(BustAim_g_OPWS_pointer != -1)
	       	return _CALL_OPWS(playerid,weaponid,hittype,hitid,fX,fY,fZ);
	      	else return 1;
         	
   		if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(hitid))
        	if(BustAim_g_OPWS_pointer != -1)
         		return _CALL_OPWS(playerid,weaponid,hittype,hitid,fX,fY,fZ);
         	else return 1;

		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID || GetPlayerSurfingVehicleID(hitid) != INVALID_VEHICLE_ID)
      		if(BustAim_g_OPWS_pointer != -1)
   				return _CALL_OPWS(playerid,weaponid,hittype,hitid,fX,fY,fZ);
			else return 1;

      	if(NetStats_PacketLossPercent(playerid) > BUSTAIM_MAX_PL_PERCENT_ALLOWED ||  NetStats_PacketLossPercent(hitid) > BUSTAIM_MAX_PL_PERCENT_ALLOWED)
			if(BustAim_g_OPWS_pointer != -1)
	     		return _CALL_OPWS(playerid,weaponid,hittype,hitid,fX,fY,fZ);
	    	else return 1;

		switch(weaponid)
		{
		    case BUSTAIM_SKIP_WEAPON_IDS:
		    {
		        if(BustAim_g_OPWS_pointer != -1)
            		return _CALL_OPWS(playerid,weaponid,hittype,hitid,fX,fY,fZ);
         		else return 1;
		    }
		}

       	new Float:hidX,Float:hidY,Float:hidZ;
       	new Float:fHitPosX, Float:fHitPosY, Float:fHitPosZ;
       	new Float:hidVelocityX,Float:hidVelocityY,Float:hidVelocityZ;
       	new Float:camFrontX,Float:camFrontY,Float:camFrontZ;
       	

        GetPlayerVelocity(hitid,hidVelocityX,hidVelocityY,hidVelocityZ);
        if((hidVelocityX*hidVelocityX + hidVelocityY*hidVelocityY + hidVelocityZ*hidVelocityZ) > 0.01) BustAim_g_ContinousShotCount[playerid]++;

		//I am reusing the variables so don't worry about the variables with different name being given as an argument to the functions
        GetPlayerPos(hitid,hidX,hidY,hidZ);
        GetPlayerPos(playerid,fHitPosX, fHitPosY, fHitPosZ);
        
        new Float:distP2P = VectorSize(hidX-fHitPosX,hidY-fHitPosY,hidZ-fHitPosZ);
        
		GetPlayerCameraFrontVector(playerid,camFrontX,camFrontY,camFrontZ);

		if(BustAim_g_ProaimTeleCount[playerid])
			if(((camFrontX + fHitPosX-hidX)*(camFrontX + fHitPosX-hidX) + (camFrontY + fHitPosY-hidY)*(camFrontY + fHitPosY-hidY) + (camFrontZ + fHitPosZ-hidZ)*(camFrontZ + fHitPosZ-hidZ)) > ((fHitPosX-hidX)*(fHitPosX-hidX) + (fHitPosY-hidY)*(fHitPosY-hidY) + (fHitPosZ-hidZ)*(fHitPosZ-hidZ)))
            	BustAim_g_BackwardShot[playerid]++;
    	
        GetPlayerLastShotVectors(playerid,hidVelocityX,hidVelocityY,hidVelocityZ, fHitPosX, fHitPosY, fHitPosZ);
		
        if(BustAim_g_OPSFA_pointer != -1)
        {
            if(distP2P > BUSTAIM_ALLOWABLE_DIST)
            {
	            if(((hidX-fHitPosX)*(hidX-fHitPosX) + (hidY-fHitPosY)*(hidY-fHitPosY) + (hidZ-fHitPosZ)*(hidZ-fHitPosZ)) > BUSTAIM_MAX_P2B_VARIANCE)
	      			if(!(++BustAim_g_ProaimTeleCount[playerid] % BUSTAIM_TRIGGER_TELEPORT))
					  if(_CALL_OPSFA(playerid,hitid,weaponid,BUSTAIM_PROAIM_TELEPORT)) BustAim_g_ProaimTeleCount[playerid]=0;
                if(!IsPlayerAimingAt(playerid,hidX,hidY,hidZ,camFrontX,camFrontY,camFrontZ,BUSTAIM_MAX_PLAYER_SPHERE))
			    	if(++BustAim_g_MissingAimCount[playerid])
            			if(!(++BustAim_g_MissingAimCount[playerid] % BUSTAIM_TRIGGER_RANDOM_AIM)) 	if(_CALL_OPSFA(playerid,hitid,weaponid,BUSTAIM_RANDOM_AIM)) BustAim_g_MissingAimCount[playerid] = 0;
			}
			if(!(BustAim_g_ContinousShotCount[playerid] % BUSTAIM_TRIGGER_NO_MISS) &&	BustAim_g_ContinousShotCount[playerid])
			   if(_CALL_OPSFA(playerid,hitid,weaponid,BUSTAIM_NO_MISS)) BustAim_g_ContinousShotCount[playerid] = 0;
            if(BustAim_g_BackwardShot[playerid] && !(BustAim_g_BackwardShot[playerid] % BUSTAIM_TRIGGER_BACKWARD_SHOT)) if(_CALL_OPSFA(playerid,hitid,weaponid,BUSTAIM_BACKWARD_SHOT)) BustAim_g_BackwardShot[playerid] = 0;
	  	}
	  	else
	  	{
	  	    if(distP2P > BUSTAIM_ALLOWABLE_DIST)
            {
		  	    if(((hidX-fHitPosX)*(hidX-fHitPosX) + (hidY-fHitPosY)*(hidY-fHitPosY) + (hidZ-fHitPosZ)*(hidZ-fHitPosZ)) > BUSTAIM_MAX_P2B_VARIANCE)
	      			++BustAim_g_ProaimTeleCount[playerid];
	    		if(!IsPlayerAimingAt(playerid,hidX,hidY,hidZ,camFrontX,camFrontY,camFrontZ,BUSTAIM_MAX_PLAYER_SPHERE))
	            	++BustAim_g_MissingAimCount[playerid];
            }
	  	}
	}
    else BustAim_g_ContinousShotCount[playerid] = 0;

    if(BustAim_g_OPWS_pointer != -1)
    	return _CALL_OPWS(playerid,weaponid,hittype,hitid,fX,fY,fZ);
	else return 1;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
stock BustAim::ResetPlayerProfile(playerid)
{
	BustAim_g_BackwardShot[playerid] = BustAim_g_ShotsHit[playerid] = BustAim_g_ShotsFired[playerid] = BustAim_g_ContinousShotCount[playerid] = BustAim_g_MissingAimCount[playerid] = BustAim_g_ProaimTeleCount[playerid] = 0;
}
stock BustAim::GetPlayerProfile(playerid,&allshots,&hitshots,&cont_shots,&missing_aim_count,&proaim_count,&backward_shots)
{
   	allshots = BustAim_g_ShotsFired[playerid];
	hitshots = BustAim_g_ShotsHit[playerid];
	cont_shots = BustAim_g_ContinousShotCount[playerid];
	missing_aim_count = BustAim_g_MissingAimCount[playerid];
	proaim_count = BustAim_g_ProaimTeleCount[playerid];
	backward_shots = BustAim_g_BackwardShot[playerid];
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if defined _ALS_OnPlayerWeaponShot
#undef OnPlayerWeaponShot
#else
#define _ALS_OnPlayerWeaponShot
#endif

#define OnPlayerWeaponShot BustAim_OnPlayerWeaponShot
forward BustAim_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////